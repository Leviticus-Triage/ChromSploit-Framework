#!/usr/bin/env python3
"""
Vulnerability scanning menu with Nuclei integration and comprehensive checks.
"""

import time
from typing import List, Optional

from core.enhanced_menu import EnhancedMenu, ProgressBar
from core.vulnerability_scanner import get_vulnerability_scanner, VulnerabilityLevel, VulnerabilityCategory
from core.enhanced_logger import get_logger
from core.error_handler import handle_errors
from core.colors import Colors


class VulnerabilityMenu(EnhancedMenu):
    """Advanced vulnerability scanning menu"""
    
    def __init__(self):
        super().__init__(
            title="üîç Vulnerability Scanner",
            description="Comprehensive vulnerability assessment with Nuclei and custom checks"
        )
        self.vuln_scanner = get_vulnerability_scanner()
        self.logger = get_logger()
        
        self.setup_menu_items()
    
    def setup_menu_items(self):
        """Setup vulnerability scanner menu items"""
        self.add_enhanced_item(
            "Quick Scan",
            self.quick_scan_menu,
            color=Colors.GREEN,
            shortcut="q",
            description="Fast scan for critical and high severity vulnerabilities",
            key="1"
        )
        
        self.add_enhanced_item(
            "Standard Scan",
            self.standard_scan_menu,
            color=Colors.BLUE,
            shortcut="s",
            description="Balanced scan with medium+ severity vulnerabilities",
            key="2"
        )
        
        self.add_enhanced_item(
            "Comprehensive Scan",
            self.comprehensive_scan_menu,
            color=Colors.RED,
            shortcut="c",
            description="Thorough scan including all vulnerability types",
            dangerous=True,
            key="3"
        )
        
        self.add_enhanced_item(
            "Specialized Scans",
            self.specialized_scans_menu,
            color=Colors.PURPLE,
            shortcut="p",
            description="Web app, network, and targeted vulnerability scans",
            key="4"
        )
        
        self.add_enhanced_item(
            "Scan Management",
            self.scan_management_menu,
            color=Colors.CYAN,
            shortcut="m",
            description="View, manage, and export scan results",
            key="5"
        )
        
        self.add_enhanced_item(
            "CVE Database",
            self.cve_database_menu,
            color=Colors.YELLOW,
            shortcut="d",
            description="Search and manage CVE vulnerability database",
            key="6"
        )
        
        self.add_enhanced_item(
            "Scanner Configuration",
            self.configuration_menu,
            color=Colors.WHITE,
            shortcut="f",
            description="Configure scan profiles and settings",
            key="7"
        )
        
        self.add_enhanced_item(
            "Zur√ºck zum Hauptmen√º",
            self.exit_menu,
            color=Colors.BRIGHT_RED,
            shortcut="b",
            description="Return to main menu",
            key="0"
        )
    
    @handle_errors
    def quick_scan_menu(self):
        """Quick scan submenu"""
        print("\n" + "="*70)
        print("‚ö° Quick Vulnerability Scan")
        print("="*70)
        print("Scannt nach kritischen und hohen Schweregrad-Schwachstellen")
        print("Gesch√§tzte Dauer: 1-5 Minuten")
        print()
        
        targets = self.get_scan_targets()
        if not targets:
            return
        
        self.run_vulnerability_scan(targets, "quick")
    
    @handle_errors
    def standard_scan_menu(self):
        """Standard scan submenu"""
        print("\n" + "="*70)
        print("üîç Standard Vulnerability Scan")
        print("="*70)
        print("Scannt nach kritischen, hohen und mittleren Schwachstellen")
        print("Gesch√§tzte Dauer: 5-15 Minuten")
        print()
        
        targets = self.get_scan_targets()
        if not targets:
            return
        
        self.run_vulnerability_scan(targets, "standard")
    
    @handle_errors
    def comprehensive_scan_menu(self):
        """Comprehensive scan submenu"""
        print("\n" + "="*70)
        print("üïµÔ∏è Comprehensive Vulnerability Scan")
        print("="*70)
        print("‚ö†Ô∏è  WARNUNG: Umfassender Scan aller Schwachstellentypen")
        print("Gesch√§tzte Dauer: 15-60 Minuten")
        print("Kann viele Anfragen an das Ziel senden!")
        print()
        
        confirm = input("‚ùó Comprehensive Scan starten? (j/N): ").lower()
        if confirm != 'j':
            return
        
        targets = self.get_scan_targets()
        if not targets:
            return
        
        self.run_vulnerability_scan(targets, "comprehensive")
    
    @handle_errors
    def specialized_scans_menu(self):
        """Specialized scans submenu"""
        menu = EnhancedMenu(
            title="üéØ Specialized Vulnerability Scans",
            description="Targeted scans for specific vulnerability types"
        )
        
        menu.add_enhanced_item(
            "Web Application Scan",
            self.web_app_scan,
            key="1",
            description="Focus on web app vulnerabilities (XSS, CSRF, Injection)",
            shortcut="w",
            color=Colors.CYAN
        )
        
        menu.add_enhanced_item(
            "Network Infrastructure Scan",
            self.network_scan,
            key="2",
            description="Network and infrastructure vulnerability assessment",
            shortcut="n",
            color=Colors.CYAN
        )
        
        menu.add_enhanced_item(
            "Authentication & Authorization",
            self.auth_scan,
            key="3",
            description="Test authentication and access control mechanisms",
            shortcut="a",
            color=Colors.CYAN
        )
        
        menu.add_enhanced_item(
            "Security Configuration",
            self.config_scan,
            key="4",
            description="Check for security misconfigurations",
            shortcut="c",
            color=Colors.CYAN
        )
        
        menu.add_enhanced_item(
            "Custom Vulnerability Check",
            self.custom_vulnerability_scan,
            key="5",
            description="Run specific vulnerability templates",
            shortcut="s",
            color=Colors.CYAN
        )
        
        menu.add_enhanced_item(
            "Zur√ºck",
            menu.exit_menu,
            key="0",
            description="Return to vulnerability scanner menu",
            shortcut="b",
            color=Colors.BRIGHT_RED
        )
        
        menu.run()
    
    @handle_errors
    def web_app_scan(self):
        """Web application vulnerability scan"""
        print("\n" + "="*70)
        print("üåê Web Application Vulnerability Scan")
        print("="*70)
        
        targets = self.get_scan_targets()
        if not targets:
            return
        
        self.run_vulnerability_scan(targets, "web_app")
    
    @handle_errors
    def network_scan(self):
        """Network infrastructure scan"""
        print("\n" + "="*70)
        print("üåê Network Infrastructure Scan")
        print("="*70)
        
        targets = self.get_scan_targets()
        if not targets:
            return
        
        self.run_vulnerability_scan(targets, "network")
    
    @handle_errors
    def auth_scan(self):
        """Authentication and authorization scan"""
        print("\n" + "="*70)
        print("üîê Authentication & Authorization Scan")
        print("="*70)
        print("Pr√ºft Authentifizierungs- und Autorisierungsmechanismen")
        print()
        
        targets = self.get_scan_targets()
        if not targets:
            return
        
        # Create custom profile for auth testing
        from core.vulnerability_scanner import ScanProfile
        auth_profile = ScanProfile(
            name="Authentication Scan",
            description="Authentication and authorization vulnerabilities",
            category_filter=[VulnerabilityCategory.AUTHENTICATION, VulnerabilityCategory.AUTHORIZATION],
            timeout=180,
            threads=15,
            rate_limit=75
        )
        
        self.run_vulnerability_scan(targets, custom_profile=auth_profile)
    
    @handle_errors
    def config_scan(self):
        """Security configuration scan"""
        print("\n" + "="*70)
        print("‚öôÔ∏è  Security Configuration Scan")
        print("="*70)
        print("Pr√ºft Sicherheitskonfigurationen und -einstellungen")
        print()
        
        targets = self.get_scan_targets()
        if not targets:
            return
        
        # Create custom profile for configuration testing
        from core.vulnerability_scanner import ScanProfile
        config_profile = ScanProfile(
            name="Configuration Scan",
            description="Security configuration vulnerabilities",
            category_filter=[VulnerabilityCategory.SECURITY_MISCONFIGURATION],
            timeout=120,
            threads=10,
            rate_limit=50
        )
        
        self.run_vulnerability_scan(targets, custom_profile=config_profile)
    
    @handle_errors
    def custom_vulnerability_scan(self):
        """Custom vulnerability scan with user-selected templates"""
        print("\n" + "="*70)
        print("üõ†Ô∏è  Custom Vulnerability Scan")
        print("="*70)
        
        # Get available templates (simplified for demo)
        print("Verf√ºgbare Vulnerability-Kategorien:")
        categories = [
            ("injection", "Injection Vulnerabilities (SQLi, Command Injection, etc.)"),
            ("xss", "Cross-Site Scripting (XSS)"),
            ("csrf", "Cross-Site Request Forgery (CSRF)"), 
            ("auth", "Authentication Bypass"),
            ("config", "Security Misconfigurations"),
            ("network", "Network Vulnerabilities"),
            ("info", "Information Disclosure")
        ]
        
        for i, (cat, desc) in enumerate(categories, 1):
            print(f"{i}. {desc}")
        
        print("\nKategorien ausw√§hlen (z.B. '1,3,5' oder 'alle'):")
        selection = input("Auswahl: ").strip()
        
        selected_categories = []
        if selection.lower() == 'alle':
            selected_categories = [cat[0] for cat in categories]
        else:
            try:
                indices = [int(x.strip()) - 1 for x in selection.split(',')]
                selected_categories = [categories[i][0] for i in indices if 0 <= i < len(categories)]
            except:
                print("‚ùå Ung√ºltige Auswahl!")
                input("Dr√ºcken Sie Enter um fortzufahren...")
                return
        
        if not selected_categories:
            print("‚ùå Keine Kategorien ausgew√§hlt!")
            input("Dr√ºcken Sie Enter um fortzufahren...")
            return
        
        print(f"\n‚úÖ {len(selected_categories)} Kategorien ausgew√§hlt: {', '.join(selected_categories)}")
        
        targets = self.get_scan_targets()
        if not targets:
            return
        
        # Create custom profile
        from core.vulnerability_scanner import ScanProfile
        custom_profile = ScanProfile(
            name="Custom Scan",
            description=f"Custom scan for categories: {', '.join(selected_categories)}",
            timeout=300,
            threads=20,
            rate_limit=100
        )
        
        self.run_vulnerability_scan(targets, custom_profile=custom_profile)
    
    @handle_errors
    def get_scan_targets(self) -> List[str]:
        """Get targets for vulnerability scanning"""
        print("üéØ Scan-Ziele konfigurieren")
        print("-" * 40)
        
        target_input = input("Ziele eingeben (getrennt durch Komma): ").strip()
        
        if not target_input:
            print("‚ùå Keine Ziele eingegeben!")
            input("Dr√ºcken Sie Enter um fortzufahren...")
            return []
        
        targets = [target.strip() for target in target_input.split(',') if target.strip()]
        
        print(f"\n‚úÖ {len(targets)} Ziele konfiguriert:")
        for target in targets:
            print(f"  ‚Ä¢ {target}")
        
        confirm = input("\n‚ùó Scan mit diesen Zielen starten? (j/N): ").lower()
        if confirm != 'j':
            return []
        
        return targets
    
    @handle_errors
    def run_vulnerability_scan(self, targets: List[str], profile_name: str = None, custom_profile=None):
        """Execute vulnerability scan"""
        print("\n" + "="*70)
        print("üöÄ Vulnerability Scan wird gestartet...")
        print("="*70)
        
        progress = ProgressBar(total=100, description="Vulnerability Scanning")
        progress.start()
        
        try:
            progress.update(10, "Scan initialisieren...")
            
            if custom_profile:
                scan_id = self.vuln_scanner.run_vulnerability_scan(targets, custom_profile=custom_profile)
            else:
                scan_id = self.vuln_scanner.run_vulnerability_scan(targets, profile_name or "standard")
            
            progress.update(50, "Vulnerabilities analysieren...")
            time.sleep(2)  # Simulate scanning time
            
            progress.update(90, "Ergebnisse verarbeiten...")
            
            # Get scan results
            summary = self.vuln_scanner.get_scan_summary(scan_id)
            
            progress.update(100, "Abgeschlossen!")
            progress.stop()
            
            if summary:
                self.display_scan_results(summary)
            else:
                print("‚ùå Keine Scan-Ergebnisse verf√ºgbar!")
            
        except Exception as e:
            progress.stop()
            print(f"‚ùå Fehler beim Vulnerability Scan: {e}")
        
        input("\nDr√ºcken Sie Enter um fortzufahren...")
    
    @handle_errors
    def display_scan_results(self, summary: dict):
        """Display scan results summary"""
        print("\n" + "="*70)
        print("üìä Vulnerability Scan Ergebnisse")
        print("="*70)
        print(f"Scan ID: {summary['scan_id']}")
        print(f"Profil: {summary['profile_name']}")
        print(f"Dauer: {summary['duration']:.2f} Sekunden")
        print(f"Status: {summary['status']}")
        print(f"Anzahl Ziele: {summary['targets_count']}")
        print()
        
        print("üìã Vulnerability Summary:")
        print(f"  üî¥ Kritisch: {summary['critical_count']}")
        print(f"  üü† Hoch: {summary['high_count']}")
        print(f"  üü° Mittel: {summary['medium_count']}")
        print(f"  üü¢ Niedrig: {summary['low_count']}")
        print(f"  ‚ÑπÔ∏è  Info: {summary['info_count']}")
        print(f"  üìä Gesamt: {summary['total_vulnerabilities']}")
        
        if summary['total_vulnerabilities'] > 0:
            print(f"\nüìÅ Detaillierte Ergebnisse gespeichert in: vuln_scan_data/")
            
            # Offer to view detailed results
            if summary['critical_count'] > 0 or summary['high_count'] > 0:
                print(f"\n‚ö†Ô∏è  {summary['critical_count'] + summary['high_count']} kritische/hohe Schwachstellen gefunden!")
                
            view_details = input("\nüìã Detaillierte Ergebnisse anzeigen? (j/N): ").lower()
            if view_details == 'j':
                self.show_detailed_scan_results(summary['scan_id'])
    
    @handle_errors
    def show_detailed_scan_results(self, scan_id: str):
        """Show detailed scan results"""
        scan_result = self.vuln_scanner.get_scan_results(scan_id)
        if not scan_result:
            print("‚ùå Scan-Ergebnisse nicht gefunden!")
            return
        
        print("\n" + "="*80)
        print(f"üìã Detaillierte Vulnerability-Ergebnisse - {scan_id}")
        print("="*80)
        
        # Group vulnerabilities by severity
        severity_groups = {}
        for vuln in scan_result.vulnerabilities:
            severity = vuln.severity.value
            if severity not in severity_groups:
                severity_groups[severity] = []
            severity_groups[severity].append(vuln)
        
        # Display by severity (critical first)
        severity_order = ['critical', 'high', 'medium', 'low', 'info']
        severity_icons = {
            'critical': 'üî¥',
            'high': 'üü†', 
            'medium': 'üü°',
            'low': 'üü¢',
            'info': '‚ÑπÔ∏è'
        }
        
        for severity in severity_order:
            if severity in severity_groups:
                vulnerabilities = severity_groups[severity]
                print(f"\n{severity_icons[severity]} {severity.upper()} Schwachstellen ({len(vulnerabilities)}):")
                print("-" * 60)
                
                for i, vuln in enumerate(vulnerabilities[:5], 1):  # Show first 5
                    print(f"{i}. {vuln.name}")
                    print(f"   Ziel: {vuln.target}")
                    print(f"   Beschreibung: {vuln.description[:100]}...")
                    if vuln.cve_ids:
                        print(f"   CVE: {', '.join(vuln.cve_ids)}")
                    if vuln.cvss_score:
                        print(f"   CVSS Score: {vuln.cvss_score}")
                    print()
                
                if len(vulnerabilities) > 5:
                    print(f"   ... und {len(vulnerabilities) - 5} weitere {severity} Schwachstellen")
                    print()
        
        print("="*80)
    
    @handle_errors
    def scan_management_menu(self):
        """Scan management submenu"""
        menu = EnhancedMenu(
            title="üìä Scan Management",
            description="View, manage, and export vulnerability scan results"
        )
        
        menu.add_enhanced_item(
            "List All Scans",
            self.list_all_scans,
            key="1",
            description="Show all vulnerability scans",
            shortcut="l",
            color=Colors.CYAN
        )
        
        menu.add_enhanced_item(
            "View Scan Details",
            self.view_scan_details,
            key="2",
            description="Show detailed results for a specific scan",
            shortcut="v",
            color=Colors.CYAN
        )
        
        menu.add_enhanced_item(
            "Export Scan Report",
            self.export_scan_report,
            key="3",
            description="Export scan results to various formats",
            shortcut="e",
            color=Colors.GREEN
        )
        
        menu.add_enhanced_item(
            "Compare Scans",
            self.compare_scans,
            key="4",
            description="Compare results between different scans",
            shortcut="c",
            color=Colors.CYAN
        )
        
        menu.add_enhanced_item(
            "Delete Scan",
            self.delete_scan,
            key="5",
            description="Remove scan results",
            shortcut="d",
            dangerous=True,
            color=Colors.RED
        )
        
        menu.add_enhanced_item(
            "Zur√ºck",
            menu.exit_menu,
            key="0",
            description="Return to vulnerability scanner menu",
            shortcut="b",
            color=Colors.BRIGHT_RED
        )
        
        menu.run()
    
    @handle_errors
    def list_all_scans(self):
        """List all vulnerability scans"""
        scans = self.vuln_scanner.list_scans()
        
        print("\n" + "="*90)
        print("üìã Alle Vulnerability Scans")
        print("="*90)
        
        if not scans:
            print("‚ÑπÔ∏è  Keine Scans gefunden.")
            input("Dr√ºcken Sie Enter um fortzufahren...")
            return
        
        print(f"{'Nr.':<3} {'Scan ID':<15} {'Profil':<15} {'Datum':<12} {'Status':<12} {'Vulnerabilities':<15}")
        print("-" * 90)
        
        for i, scan in enumerate(scans, 1):
            date_str = scan['start_time'][:10]  # YYYY-MM-DD
            vuln_summary = f"{scan['critical_count']}C/{scan['high_count']}H/{scan['medium_count']}M"
            
            print(f"{i:<3} {scan['scan_id']:<15} {scan['profile_name']:<15} "
                  f"{date_str:<12} {scan['status']:<12} {vuln_summary:<15}")
        
        print("="*90)
        input("Dr√ºcken Sie Enter um fortzufahren...")
    
    @handle_errors
    def view_scan_details(self):
        """View detailed scan results"""
        scans = self.vuln_scanner.list_scans()
        
        if not scans:
            print("‚ùå Keine Scans verf√ºgbar!")
            input("Dr√ºcken Sie Enter um fortzufahren...")
            return
        
        print("\n" + "="*60)
        print("üìã Scan ausw√§hlen")
        print("="*60)
        
        for i, scan in enumerate(scans, 1):
            print(f"{i}. {scan['scan_id']} - {scan['profile_name']} "
                  f"({scan['total_vulnerabilities']} vulnerabilities)")
        
        try:
            choice = int(input("\nScan ausw√§hlen (Nummer): ")) - 1
            if 0 <= choice < len(scans):
                selected_scan = scans[choice]
                self.show_detailed_scan_results(selected_scan['scan_id'])
            else:
                print("‚ùå Ung√ºltige Auswahl!")
        except ValueError:
            print("‚ùå Bitte eine g√ºltige Nummer eingeben!")
        
        input("Dr√ºcken Sie Enter um fortzufahren...")
    
    @handle_errors
    def export_scan_report(self):
        """Export scan report"""
        scans = self.vuln_scanner.list_scans()
        
        if not scans:
            print("‚ùå Keine Scans verf√ºgbar!")
            input("Dr√ºcken Sie Enter um fortzufahren...")
            return
        
        print("\n" + "="*60)
        print("üì§ Scan Report exportieren")
        print("="*60)
        
        # Select scan
        for i, scan in enumerate(scans, 1):
            print(f"{i}. {scan['scan_id']} - {scan['profile_name']}")
        
        try:
            choice = int(input("\nScan ausw√§hlen (Nummer): ")) - 1
            if not (0 <= choice < len(scans)):
                print("‚ùå Ung√ºltige Auswahl!")
                input("Dr√ºcken Sie Enter um fortzufahren...")
                return
            
            selected_scan = scans[choice]
            
            # Select format
            print("\nExport-Format ausw√§hlen:")
            print("1. JSON")
            print("2. HTML")
            print("3. CSV")
            
            format_choice = input("Format (1-3): ").strip()
            format_map = {'1': 'json', '2': 'html', '3': 'csv'}
            
            if format_choice not in format_map:
                print("‚ùå Ung√ºltiges Format!")
                input("Dr√ºcken Sie Enter um fortzufahren...")
                return
            
            export_format = format_map[format_choice]
            
            print(f"\nüì§ Exportiere Scan {selected_scan['scan_id']} als {export_format.upper()}...")
            
            output_file = self.vuln_scanner.export_scan_report(selected_scan['scan_id'], export_format)
            
            if output_file:
                print(f"‚úÖ Report exportiert: {output_file}")
            else:
                print("‚ùå Export fehlgeschlagen!")
                
        except ValueError:
            print("‚ùå Bitte eine g√ºltige Nummer eingeben!")
        
        input("Dr√ºcken Sie Enter um fortzufahren...")
    
    @handle_errors
    def compare_scans(self):
        """Compare vulnerability scans"""
        scans = self.vuln_scanner.list_scans()
        
        if len(scans) < 2:
            print("‚ùå Mindestens 2 Scans f√ºr Vergleich erforderlich!")
            input("Dr√ºcken Sie Enter um fortzufahren...")
            return
        
        print("\n" + "="*80)
        print("üìä Scan-Vergleich")
        print("="*80)
        
        print(f"{'Scan ID':<15} {'Profil':<15} {'Datum':<12} {'Crit':<5} {'High':<5} {'Med':<5} {'Low':<5} {'Info':<5}")
        print("-" * 80)
        
        for scan in scans[:10]:  # Show first 10
            date_str = scan['start_time'][:10]
            print(f"{scan['scan_id']:<15} {scan['profile_name']:<15} {date_str:<12} "
                  f"{scan['critical_count']:<5} {scan['high_count']:<5} {scan['medium_count']:<5} "
                  f"{scan['low_count']:<5} {scan['info_count']:<5}")
        
        print("="*80)
        input("Dr√ºcken Sie Enter um fortzufahren...")
    
    @handle_errors
    def delete_scan(self):
        """Delete scan results"""
        scans = self.vuln_scanner.list_scans()
        
        if not scans:
            print("‚ùå Keine Scans verf√ºgbar!")
            input("Dr√ºcken Sie Enter um fortzufahren...")
            return
        
        print("\n" + "="*60)
        print("üóëÔ∏è  Scan l√∂schen")
        print("="*60)
        
        for i, scan in enumerate(scans, 1):
            print(f"{i}. {scan['scan_id']} - {scan['profile_name']}")
        
        try:
            choice = int(input("\nZu l√∂schenden Scan ausw√§hlen (Nummer): ")) - 1
            if 0 <= choice < len(scans):
                selected_scan = scans[choice]
                
                confirm = input(f"‚ùó Wirklich Scan '{selected_scan['scan_id']}' l√∂schen? (j/N): ").lower()
                if confirm == 'j':
                    success = self.vuln_scanner.delete_scan(selected_scan['scan_id'])
                    if success:
                        print(f"‚úÖ Scan '{selected_scan['scan_id']}' gel√∂scht!")
                    else:
                        print("‚ùå L√∂schen fehlgeschlagen!")
                else:
                    print("‚ùå L√∂schen abgebrochen.")
            else:
                print("‚ùå Ung√ºltige Auswahl!")
        except ValueError:
            print("‚ùå Bitte eine g√ºltige Nummer eingeben!")
        
        input("Dr√ºcken Sie Enter um fortzufahren...")
    
    @handle_errors
    def cve_database_menu(self):
        """CVE database management menu"""
        menu = EnhancedMenu(
            title="üóÉÔ∏è  CVE Database",
            description="Search and manage CVE vulnerability database"
        )
        
        menu.add_enhanced_item(
            "Search CVEs",
            self.search_cves,
            key="1",
            description="Search for CVE vulnerabilities",
            shortcut="s",
            color=Colors.CYAN
        )
        
        menu.add_enhanced_item(
            "CVE Details",
            self.view_cve_details,
            key="2",
            description="View detailed information for a specific CVE",
            shortcut="v",
            color=Colors.CYAN
        )
        
        menu.add_enhanced_item(
            "Update Database",
            self.update_cve_database,
            key="3",
            description="Update CVE database from NVD",
            shortcut="u",
            color=Colors.GREEN
        )
        
        menu.add_enhanced_item(
            "Database Statistics",
            self.show_cve_statistics,
            key="4",
            description="Show CVE database statistics",
            shortcut="t",
            color=Colors.CYAN
        )
        
        menu.add_enhanced_item(
            "Zur√ºck",
            menu.exit_menu,
            key="0",
            description="Return to vulnerability scanner menu",
            shortcut="b",
            color=Colors.BRIGHT_RED
        )
        
        menu.run()
    
    @handle_errors
    def search_cves(self):
        """Search CVE database"""
        print("\n" + "="*60)
        print("üîç CVE Datenbank durchsuchen")
        print("="*60)
        
        query = input("Suchbegriff eingeben (Produktname, Beschreibung): ").strip()
        
        if not query:
            print("‚ùå Kein Suchbegriff eingegeben!")
            input("Dr√ºcken Sie Enter um fortzufahren...")
            return
        
        print(f"\nüîç Suche nach '{query}'...")
        
        try:
            results = self.vuln_scanner.cve_db.search_cves(query)
            
            if not results:
                print("‚ùå Keine CVEs gefunden!")
                input("Dr√ºcken Sie Enter um fortzufahren...")
                return
            
            print(f"\n‚úÖ {len(results)} CVEs gefunden:")
            print("-" * 80)
            
            for i, cve in enumerate(results[:10], 1):  # Show first 10
                print(f"{i}. {cve.cve_id} (CVSS: {cve.cvss_score}) - {cve.severity.value.upper()}")
                print(f"   {cve.description[:100]}...")
                print()
            
            if len(results) > 10:
                print(f"... und {len(results) - 10} weitere CVEs")
            
        except Exception as e:
            print(f"‚ùå Fehler bei CVE-Suche: {e}")
        
        input("Dr√ºcken Sie Enter um fortzufahren...")
    
    @handle_errors
    def view_cve_details(self):
        """View CVE details"""
        print("\n" + "="*60)
        print("üìã CVE Details anzeigen")
        print("="*60)
        
        cve_id = input("CVE-ID eingeben (z.B. CVE-2023-12345): ").strip().upper()
        
        if not cve_id.startswith('CVE-'):
            print("‚ùå Ung√ºltige CVE-ID! Format: CVE-YYYY-NNNN")
            input("Dr√ºcken Sie Enter um fortzufahren...")
            return
        
        print(f"\nüîç Lade CVE Details f√ºr {cve_id}...")
        
        try:
            cve_info = self.vuln_scanner.cve_db.get_cve_info(cve_id)
            
            if not cve_info:
                print(f"‚ùå CVE {cve_id} nicht in der Datenbank gefunden!")
                input("Dr√ºcken Sie Enter um fortzufahren...")
                return
            
            print("\n" + "="*70)
            print(f"üìã CVE Details: {cve_info.cve_id}")
            print("="*70)
            print(f"Beschreibung: {cve_info.description}")
            print(f"Schweregrad: {cve_info.severity.value.upper()}")
            print(f"CVSS Score: {cve_info.cvss_score}")
            print(f"CVSS Vector: {cve_info.cvss_vector}")
            print(f"Ver√∂ffentlicht: {cve_info.published_date.strftime('%Y-%m-%d')}")
            print(f"Ge√§ndert: {cve_info.modified_date.strftime('%Y-%m-%d')}")
            
            if cve_info.cwe_ids:
                print(f"CWE IDs: {', '.join(cve_info.cwe_ids)}")
            
            if cve_info.affected_products:
                print(f"Betroffene Produkte: {', '.join(cve_info.affected_products[:3])}")
                if len(cve_info.affected_products) > 3:
                    print(f"... und {len(cve_info.affected_products) - 3} weitere")
            
            if cve_info.references:
                print(f"Referenzen: {len(cve_info.references)} verf√ºgbar")
            
            print("="*70)
            
        except Exception as e:
            print(f"‚ùå Fehler beim Laden der CVE Details: {e}")
        
        input("Dr√ºcken Sie Enter um fortzufahren...")
    
    @handle_errors
    def update_cve_database(self):
        """Update CVE database"""
        print("\n" + "="*60)
        print("üîÑ CVE Datenbank aktualisieren")
        print("="*60)
        print("L√§dt aktuelle CVE-Daten vom National Vulnerability Database")
        print()
        
        confirm = input("‚ùó Datenbank-Update starten? (j/N): ").lower()
        if confirm != 'j':
            return
        
        print("\nüîÑ Aktualisiere CVE Datenbank...")
        
        progress = ProgressBar(total=100, description="CVE Database Update")
        progress.start()
        
        try:
            progress.update(25, "Verbinde zu NVD API...")
            self.vuln_scanner.cve_db.update_cve_database(force_update=True)
            
            progress.update(100, "Abgeschlossen!")
            progress.stop()
            
            print("‚úÖ CVE Datenbank erfolgreich aktualisiert!")
            
        except Exception as e:
            progress.stop()
            print(f"‚ùå Fehler beim Datenbank-Update: {e}")
        
        input("Dr√ºcken Sie Enter um fortzufahren...")
    
    @handle_errors
    def show_cve_statistics(self):
        """Show CVE database statistics"""
        print("\n" + "="*60)
        print("üìä CVE Datenbank Statistiken")
        print("="*60)
        print("Diese Funktion wird in einer zuk√ºnftigen Version verf√ºgbar sein.")
        print()
        print("Geplante Statistiken:")
        print("‚Ä¢ Anzahl CVEs nach Schweregrad")
        print("‚Ä¢ CVEs nach Ver√∂ffentlichungsjahr")
        print("‚Ä¢ Top betroffene Produkte")
        print("‚Ä¢ CWE-Kategorien")
        input("\nDr√ºcken Sie Enter um fortzufahren...")
    
    @handle_errors
    def configuration_menu(self):
        """Scanner configuration menu"""
        menu = EnhancedMenu(
            title="‚öôÔ∏è  Scanner Configuration",
            description="Configure scan profiles and settings"
        )
        
        menu.add_enhanced_item(
            "View Scan Profiles",
            self.view_scan_profiles,
            key="1",
            description="Show available scan profiles",
            shortcut="v",
            color=Colors.CYAN
        )
        
        menu.add_enhanced_item(
            "Create Custom Profile",
            self.create_custom_profile,
            key="2",
            description="Create new scan profile",
            shortcut="c",
            color=Colors.GREEN
        )
        
        menu.add_enhanced_item(
            "Update Templates",
            self.update_nuclei_templates,
            key="3",
            description="Update Nuclei vulnerability templates",
            shortcut="u",
            color=Colors.GREEN
        )
        
        menu.add_enhanced_item(
            "Scanner Settings",
            self.configure_scanner_settings,
            key="4",
            description="Configure global scanner settings",
            shortcut="s",
            color=Colors.CYAN
        )
        
        menu.add_enhanced_item(
            "Zur√ºck",
            menu.exit_menu,
            key="0",
            description="Return to vulnerability scanner menu",
            shortcut="b",
            color=Colors.BRIGHT_RED
        )
        
        menu.run()
    
    @handle_errors
    def view_scan_profiles(self):
        """View available scan profiles"""
        print("\n" + "="*80)
        print("üìã Verf√ºgbare Scan-Profile")
        print("="*80)
        
        profiles = self.vuln_scanner.profiles
        
        for name, profile in profiles.items():
            print(f"\nüîç {profile.name} ({name})")
            print(f"Beschreibung: {profile.description}")
            print(f"Timeout: {profile.timeout}s")
            print(f"Threads: {profile.threads}")
            print(f"Rate Limit: {profile.rate_limit} req/min")
            
            if profile.severity_filter:
                severities = [s.value for s in profile.severity_filter]
                print(f"Schweregrade: {', '.join(severities)}")
            
            if profile.category_filter:
                categories = [c.value for c in profile.category_filter]
                print(f"Kategorien: {', '.join(categories)}")
        
        print("="*80)
        input("Dr√ºcken Sie Enter um fortzufahren...")
    
    @handle_errors
    def create_custom_profile(self):
        """Create custom scan profile"""
        print("\n" + "="*60)
        print("üõ†Ô∏è  Benutzerdefiniertes Scan-Profil erstellen")
        print("="*60)
        print("Diese Funktion wird in einer zuk√ºnftigen Version verf√ºgbar sein.")
        input("\nDr√ºcken Sie Enter um fortzufahren...")
    
    @handle_errors
    def update_nuclei_templates(self):
        """Update Nuclei templates"""
        print("\n" + "="*60)
        print("üîÑ Nuclei Templates aktualisieren")
        print("="*60)
        
        confirm = input("‚ùó Template-Update starten? (j/N): ").lower()
        if confirm != 'j':
            return
        
        print("\nüîÑ Aktualisiere Nuclei Templates...")
        
        progress = ProgressBar(total=100, description="Template Update")
        progress.start()
        
        try:
            progress.update(50, "Templates herunterladen...")
            success = self.vuln_scanner.nuclei_scanner.update_templates()
            
            progress.update(100, "Abgeschlossen!")
            progress.stop()
            
            if success:
                print("‚úÖ Nuclei Templates erfolgreich aktualisiert!")
            else:
                print("‚ùå Template-Update fehlgeschlagen!")
            
        except Exception as e:
            progress.stop()
            print(f"‚ùå Fehler beim Template-Update: {e}")
        
        input("Dr√ºcken Sie Enter um fortzufahren...")
    
    @handle_errors
    def configure_scanner_settings(self):
        """Configure global scanner settings"""
        print("\n" + "="*60)
        print("‚öôÔ∏è  Scanner-Einstellungen konfigurieren")
        print("="*60)
        print("Diese Funktion wird in einer zuk√ºnftigen Version verf√ºgbar sein.")
        print()
        print("Geplante Einstellungen:")
        print("‚Ä¢ Standard-Timeout")
        print("‚Ä¢ Standard-Thread-Anzahl")
        print("‚Ä¢ Rate Limiting")
        print("‚Ä¢ Proxy-Konfiguration")
        print("‚Ä¢ Ausgabe-Verzeichnisse")
        input("\nDr√ºcken Sie Enter um fortzufahren...")
    
    def get_status_text(self) -> str:
        """Get current status for display"""
        scan_count = len(self.vuln_scanner.scan_results)
        return f"Scans verf√ºgbar: {scan_count}"
    
    def run(self):
        """Run the menu"""
        self.display()