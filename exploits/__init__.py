#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ChromSploit Framework - Exploits Module (SAFE VERSION)
Safe implementations of browser vulnerability exploits for educational purposes
"""

import logging

# Import safe base class
from .safe_exploit_base import SafeExploitBase, SafetyMode

# Import safe exploit implementations
from .cve_2024_32002_safe import CVE2024_32002_Safe as CVE2024_32002_Exploit
from .cve_2025_24813_safe import CVE2025_24813_Safe as CVE2025_24813_Exploit
from .oauth_exploitation_safe import OAuthExploitSafe as OAuthExploitEngine

# Import other CVE exploits (these should also be made safe)
try:
    from .cve_2025_4664 import CVE2025_4664_Exploit
except ImportError:
    logging.warning("CVE-2025-4664 exploit not available")
    CVE2025_4664_Exploit = None

try:
    from .cve_2025_2783 import CVE2025_2783_Exploit
except ImportError:
    logging.warning("CVE-2025-2783 exploit not available")
    CVE2025_2783_Exploit = None

try:
    from .cve_2025_2857 import CVE2025_2857_Exploit
except ImportError:
    logging.warning("CVE-2025-2857 exploit not available")
    CVE2025_2857_Exploit = None

try:
    from .cve_2025_30397 import CVE2025_30397_Exploit
except ImportError:
    logging.warning("CVE-2025-30397 exploit not available")
    CVE2025_30397_Exploit = None

# Export safe implementations
__all__ = [
    'SafeExploitBase',
    'SafetyMode',
    'CVE2024_32002_Exploit',
    'CVE2025_24813_Exploit',
    'OAuthExploitEngine'
]

# Add other exploits if available
if CVE2025_4664_Exploit:
    __all__.append('CVE2025_4664_Exploit')
if CVE2025_2783_Exploit:
    __all__.append('CVE2025_2783_Exploit')
if CVE2025_2857_Exploit:
    __all__.append('CVE2025_2857_Exploit')
if CVE2025_30397_Exploit:
    __all__.append('CVE2025_30397_Exploit')

# Exploit registry for dynamic loading
EXPLOITS = {
    'CVE-2024-32002': CVE2024_32002_Exploit,
    'CVE-2025-24813': CVE2025_24813_Exploit,
    'OAuth': OAuthExploitEngine
}

# Add other exploits to registry if available
if CVE2025_4664_Exploit:
    EXPLOITS['CVE-2025-4664'] = CVE2025_4664_Exploit
if CVE2025_2783_Exploit:
    EXPLOITS['CVE-2025-2783'] = CVE2025_2783_Exploit
if CVE2025_2857_Exploit:
    EXPLOITS['CVE-2025-2857'] = CVE2025_2857_Exploit
if CVE2025_30397_Exploit:
    EXPLOITS['CVE-2025-30397'] = CVE2025_30397_Exploit

def get_exploit(cve_id: str):
    """Get exploit class by CVE ID"""
    exploit_class = EXPLOITS.get(cve_id)
    if not exploit_class:
        logging.error(f"Exploit not found: {cve_id}")
        return None
    
    # Log safety notice
    logging.info(f"Loading SAFE implementation of {cve_id}")
    logging.info("This exploit will run in simulation mode by default")
    
    return exploit_class

def list_available_exploits():
    """List all available exploits"""
    return list(EXPLOITS.keys())

# Safety notice
logging.info("""
╔══════════════════════════════════════════════════════════════════╗
║                    ChromSploit Security Notice                    ║
║                                                                   ║
║  All exploits have been converted to SAFE implementations that:  ║
║  • Default to simulation mode                                     ║
║  • Require explicit authorization for real execution              ║
║  • Include comprehensive safety checks                            ║
║  • Provide educational value without causing harm                 ║
║                                                                   ║
║  Use these tools responsibly and only on authorized systems!     ║
╚══════════════════════════════════════════════════════════════════╝
""")