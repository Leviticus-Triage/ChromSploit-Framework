#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
OAuth Exploitation Engine (SAFE VERSION)
Safe simulation of OAuth phishing attacks for security awareness training
"""

import os
import json
import time
import uuid
import tempfile
from typing import Dict, List, Any, Optional
from pathlib import Path

from .safe_exploit_base import SafeExploitBase, SafetyMode


class OAuthExploitSafe(SafeExploitBase):
    """Safe implementation of OAuth phishing simulation"""
    
    def __init__(self):
        super().__init__(
            cve_id="OAUTH-PHISHING",
            name="OAuth Phishing Simulation",
            description="Educational demonstration of OAuth phishing attacks"
        )
        
        # Default safe configuration
        self.config.update({
            'kali_ip': '127.0.0.1',
            'port': 8084,
            'provider': 'demo',
            'target_client_id': 'safe-demo-client-id'
        })
        
        self.simulation_artifacts = []
        self.demo_sessions = {}
    
    def _validate_network_safety(self) -> bool:
        """Ensure we're only binding to localhost"""
        return self.config['kali_ip'] in ['127.0.0.1', 'localhost', '0.0.0.0']
    
    def _execute_simulation(self, target_url: str = None) -> Dict[str, Any]:
        """Execute safe OAuth phishing simulation"""
        try:
            self._log_safe("Starting OAuth phishing simulation - educational demonstration only")
            
            # Phase 1: Create safe demonstration pages
            self._log_safe("Phase 1: Creating safe demonstration phishing pages")
            demo_pages = self._create_demo_phishing_pages()
            
            # Phase 2: Simulate OAuth flow
            self._log_safe("Phase 2: Simulating OAuth authentication flow")
            oauth_simulation = self._simulate_oauth_flow()
            
            # Phase 3: Create educational materials
            self._log_safe("Phase 3: Creating security awareness materials")
            education_files = self._create_education_materials()
            
            # Phase 4: Generate detection signatures
            self._log_safe("Phase 4: Generating phishing detection signatures")
            detection_info = self._create_detection_signatures()
            
            # Create comprehensive result
            result = {
                'success': True,
                'cve_id': self.cve_id,
                'mode': 'simulation',
                'description': 'Safe OAuth phishing simulation for security training',
                'phishing_url': f"http://{self.config['kali_ip']}:{self.config['port']}/demo",
                'simulation_data': {
                    'demonstration_pages': demo_pages,
                    'oauth_flow': oauth_simulation,
                    'education_materials': education_files,
                    'detection_signatures': detection_info
                },
                'educational_info': {
                    'attack_explanation': self._get_attack_explanation(),
                    'red_flags': self._get_phishing_red_flags(),
                    'prevention_tips': self._get_prevention_tips(),
                    'legitimate_oauth_flow': self._get_legitimate_oauth_explanation()
                },
                'artifacts_created': self.simulation_artifacts,
                'safety_notice': "This is a safe simulation. No actual credentials are captured."
            }
            
            self._log_safe("OAuth phishing simulation completed successfully")
            return result
            
        except Exception as e:
            self._log_error(f"Simulation failed: {e}")
            return self._create_safe_failure_response(str(e))
    
    def _create_demo_phishing_pages(self) -> Dict[str, str]:
        """Create safe demonstration phishing pages"""
        pages = {}
        
        # Create main phishing page
        main_page_path = f"/tmp/oauth_demo_main_{int(time.time())}.html"
        with open(main_page_path, 'w') as f:
            f.write(self._generate_safe_phishing_page())
        pages['main_page'] = main_page_path
        self.simulation_artifacts.append(main_page_path)
        
        # Create fake provider page
        provider_page_path = f"/tmp/oauth_demo_provider_{int(time.time())}.html"
        with open(provider_page_path, 'w') as f:
            f.write(self._generate_fake_provider_page())
        pages['provider_page'] = provider_page_path
        self.simulation_artifacts.append(provider_page_path)
        
        # Create warning page
        warning_page_path = f"/tmp/oauth_demo_warning_{int(time.time())}.html"
        with open(warning_page_path, 'w') as f:
            f.write(self._generate_warning_page())
        pages['warning_page'] = warning_page_path
        self.simulation_artifacts.append(warning_page_path)
        
        return pages
    
    def _generate_safe_phishing_page(self) -> str:
        """Generate safe demonstration phishing page"""
        return """<!DOCTYPE html>
<html>
<head>
    <title>OAuth Security Training - Demo Phishing Page</title>
    <meta charset="utf-8">
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
            background: #f5f5f5;
            margin: 0;
            padding: 50px;
        }
        .warning-banner {
            background: #dc3545;
            color: white;
            padding: 20px;
            text-align: center;
            font-weight: bold;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 1000;
        }
        .container {
            max-width: 400px;
            margin: 80px auto 0;
            background: white;
            padding: 40px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border: 3px solid #dc3545;
        }
        .demo-notice {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 20px;
        }
        .title {
            font-size: 24px;
            color: #1b1b1b;
            margin-bottom: 10px;
            text-align: center;
        }
        .subtitle {
            color: #666;
            margin-bottom: 30px;
            text-align: center;
        }
        .oauth-btn {
            background: #0078d4;
            color: white;
            padding: 15px 20px;
            border: none;
            border-radius: 4px;
            width: 100%;
            text-decoration: none;
            display: block;
            text-align: center;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
        }
        .oauth-btn:hover {
            background: #106ebe;
        }
        .red-flags {
            margin-top: 30px;
            padding: 20px;
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            border-radius: 4px;
        }
        .red-flags h3 {
            color: #721c24;
            margin-top: 0;
        }
        .red-flags ul {
            margin: 10px 0;
            padding-left: 20px;
        }
    </style>
</head>
<body>
    <div class="warning-banner">
        ‚ö†Ô∏è SECURITY TRAINING DEMONSTRATION - This is a simulated phishing page for educational purposes ‚ö†Ô∏è
    </div>
    
    <div class="container">
        <div class="demo-notice">
            <strong>Training Exercise:</strong> This page demonstrates how OAuth phishing attacks work.
            No real authentication occurs and no credentials are captured.
        </div>
        
        <h1 class="title">Sign in with Demo Provider</h1>
        <p class="subtitle">to continue to SuperApp</p>
        
        <button class="oauth-btn" onclick="showEducation()">
            Continue with Demo Provider
        </button>
        
        <div class="red-flags">
            <h3>üö© Red Flags on This Page:</h3>
            <ul>
                <li>URL doesn't match legitimate provider domain</li>
                <li>Generic "SuperApp" name instead of specific service</li>
                <li>No HTTPS security indicator (in real attack)</li>
                <li>Slightly different styling from real provider</li>
                <li>Suspicious redirect URLs in OAuth parameters</li>
                <li>Missing security badges and certifications</li>
            </ul>
        </div>
    </div>
    
    <script>
        function showEducation() {
            alert('TRAINING ALERT:\\n\\nIn a real phishing attack, clicking this button would:\\n' +
                  '1. Redirect you to a fake login page\\n' +
                  '2. Steal your credentials\\n' +
                  '3. Use your account for malicious purposes\\n\\n' +
                  'Always verify the URL before entering credentials!');
            
            // Log training interaction
            console.log('User interacted with phishing simulation for training');
        }
    </script>
</body>
</html>"""
    
    def _generate_fake_provider_page(self) -> str:
        """Generate fake provider login page for demonstration"""
        return """<!DOCTYPE html>
<html>
<head>
    <title>FAKE Provider Login - Security Training</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: #f0f0f0;
            margin: 0;
            padding: 50px;
        }
        .fake-indicator {
            background: #dc3545;
            color: white;
            padding: 15px;
            text-align: center;
            font-weight: bold;
            margin-bottom: 20px;
        }
        .login-box {
            max-width: 350px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border: 3px dashed #dc3545;
        }
        .comparison {
            margin-top: 30px;
            padding: 20px;
            background: #e3f2fd;
            border-radius: 4px;
        }
        input[type="text"], input[type="password"] {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        .fake-submit {
            background: #dc3545;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            width: 100%;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="fake-indicator">
        ‚ö†Ô∏è FAKE LOGIN PAGE - TRAINING DEMONSTRATION ‚ö†Ô∏è
    </div>
    
    <div class="login-box">
        <h2>Demo Provider Sign In</h2>
        <p style="color: red; font-weight: bold;">
            This is a FAKE login page used for security training.
            Never enter real credentials here!
        </p>
        
        <form onsubmit="educate(); return false;">
            <input type="text" placeholder="Email (DO NOT ENTER REAL EMAIL)" disabled>
            <input type="password" placeholder="Password (DO NOT ENTER REAL PASSWORD)" disabled>
            <button type="submit" class="fake-submit">Sign In (DISABLED)</button>
        </form>
        
        <div class="comparison">
            <h3>How to Spot the Fake:</h3>
            <ul>
                <li>URL: fake-provider.phishing-demo.local (not real provider)</li>
                <li>No HTTPS padlock icon</li>
                <li>Different design from official provider</li>
                <li>Grammar/spelling errors (in real phishing)</li>
                <li>Urgent or threatening language</li>
                <li>Too good to be true offers</li>
            </ul>
        </div>
    </div>
    
    <script>
        function educate() {
            alert('Remember: Always check the URL before entering credentials!\\n\\n' +
                  'Real providers use their official domains with HTTPS.');
        }
    </script>
</body>
</html>"""
    
    def _generate_warning_page(self) -> str:
        """Generate warning and education page"""
        return """<!DOCTYPE html>
<html>
<head>
    <title>OAuth Phishing - Security Awareness</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 40px;
            background: #f5f5f5;
        }
        .content {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 40px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 { color: #dc3545; }
        h2 { color: #495057; margin-top: 30px; }
        .warning-box {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            padding: 20px;
            border-radius: 4px;
            margin: 20px 0;
        }
        .safe-box {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            padding: 20px;
            border-radius: 4px;
            margin: 20px 0;
        }
        .example-box {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            padding: 15px;
            border-radius: 4px;
            margin: 15px 0;
            font-family: monospace;
        }
        ul { margin: 10px 0; }
        li { margin: 5px 0; }
    </style>
</head>
<body>
    <div class="content">
        <h1>OAuth Phishing Attacks: What You Need to Know</h1>
        
        <div class="warning-box">
            <strong>‚ö†Ô∏è Warning:</strong> OAuth phishing is one of the most sophisticated
            and successful phishing techniques. Even tech-savvy users can fall victim!
        </div>
        
        <h2>How OAuth Phishing Works</h2>
        <ol>
            <li><strong>Initial Contact:</strong> Attacker sends email/message with OAuth login link</li>
            <li><strong>Fake Authorization Page:</strong> Link leads to convincing fake provider page</li>
            <li><strong>Credential Theft:</strong> User enters credentials on fake page</li>
            <li><strong>Token Hijacking:</strong> Attacker captures OAuth tokens or credentials</li>
            <li><strong>Account Compromise:</strong> Attacker gains access to user's accounts</li>
        </ol>
        
        <h2>Real vs Fake: Key Differences</h2>
        
        <h3>Legitimate OAuth URL:</h3>
        <div class="example-box">
            https://accounts.google.com/o/oauth2/v2/auth?client_id=legitimate_app&...
            https://login.microsoftonline.com/common/oauth2/v2.0/authorize?...
            https://github.com/login/oauth/authorize?client_id=real_app&...
        </div>
        
        <h3>Phishing OAuth URL:</h3>
        <div class="example-box">
            http://accounts-google.phishing-site.com/oauth/auth?...
            https://microsoft-login.fake-domain.net/authorize?...
            http://glthub.com/login/oauth/authorize?... (note the typo)
        </div>
        
        <h2>Protection Strategies</h2>
        
        <div class="safe-box">
            <h3>‚úÖ Always Check:</h3>
            <ul>
                <li>The FULL URL in your browser's address bar</li>
                <li>HTTPS with valid certificate (padlock icon)</li>
                <li>Exact domain spelling (no typos or extra characters)</li>
                <li>Your password manager recognizes the site</li>
            </ul>
        </div>
        
        <h2>Red Flags to Watch For</h2>
        <ul>
            <li>üö© Unexpected login requests</li>
            <li>üö© Urgency or threats ("Act now or lose access!")</li>
            <li>üö© Too-good-to-be-true offers</li>
            <li>üö© Poor grammar or spelling</li>
            <li>üö© Generic greetings ("Dear user" instead of your name)</li>
            <li>üö© Suspicious sender email addresses</li>
            <li>üö© Links that don't match the displayed text</li>
        </ul>
        
        <h2>If You Suspect Phishing</h2>
        <ol>
            <li>Do NOT click links in suspicious emails</li>
            <li>Navigate to the service directly by typing the URL</li>
            <li>Check your account for unauthorized access</li>
            <li>Report the phishing attempt</li>
            <li>Change your password if you entered it</li>
            <li>Enable two-factor authentication</li>
        </ol>
        
        <h2>OAuth Security Best Practices</h2>
        <ul>
            <li>Only authorize apps you trust</li>
            <li>Review app permissions carefully</li>
            <li>Regularly audit authorized applications</li>
            <li>Revoke access for unused apps</li>
            <li>Use unique passwords for each service</li>
            <li>Enable 2FA on all accounts</li>
            <li>Keep your browser and OS updated</li>
        </ul>
        
        <div class="safe-box">
            <h3>Remember:</h3>
            <p>When in doubt, don't click! Contact the service provider directly
            through their official website or support channels.</p>
        </div>
    </div>
</body>
</html>"""
    
    def _simulate_oauth_flow(self) -> Dict[str, Any]:
        """Simulate OAuth authentication flow"""
        state = f'demo_{uuid.uuid4().hex[:16]}'
        
        simulation_flow = {
            'flow_id': state,
            'provider': 'Demo Provider (Safe)',
            'steps': [
                {
                    'step': 1,
                    'action': 'User clicks login button',
                    'url': f'http://localhost:8084/oauth/authorize?client_id=demo&state={state}',
                    'description': 'Initial authorization request'
                },
                {
                    'step': 2,
                    'action': 'Redirect to fake provider',
                    'url': 'http://fake-provider.demo/login',
                    'description': 'User redirected to phishing page'
                },
                {
                    'step': 3,
                    'action': 'Credential entry (simulated)',
                    'description': 'User would enter credentials here'
                },
                {
                    'step': 4,
                    'action': 'Token capture (simulated)',
                    'description': 'Attacker would capture OAuth tokens'
                },
                {
                    'step': 5,
                    'action': 'Account compromise (prevented)',
                    'description': 'In real attack, attacker gains account access'
                }
            ],
            'captured_data': {
                'note': 'No real data captured - this is a simulation',
                'would_capture': [
                    'OAuth access tokens',
                    'Refresh tokens', 
                    'User profile information',
                    'Email addresses',
                    'Contact lists',
                    'Application permissions'
                ]
            }
        }
        
        return simulation_flow
    
    def _create_education_materials(self) -> List[str]:
        """Create security education materials"""
        materials = []
        
        # Create OAuth security guide
        guide_path = f"/tmp/oauth_security_guide_{int(time.time())}.md"
        with open(guide_path, 'w') as f:
            f.write("""# OAuth Security Guide

## What is OAuth?
OAuth is an authorization framework that allows applications to obtain limited access 
to user accounts without exposing passwords.

## Legitimate OAuth Flow
1. User clicks "Login with Provider"
2. Redirected to OFFICIAL provider domain (e.g., accounts.google.com)
3. User logs in on provider's secure page
4. Provider asks user to authorize the app
5. User is redirected back to the app with authorization
6. App exchanges authorization for access token

## How Attackers Exploit OAuth
- **Phishing:** Fake OAuth pages that steal credentials
- **Malicious Apps:** Apps that request excessive permissions
- **Token Theft:** Stealing OAuth tokens through various means
- **Redirect Manipulation:** Exploiting redirect URI validation

## Security Checklist
- [ ] Verify the domain in your browser's address bar
- [ ] Look for HTTPS and valid certificate
- [ ] Check for typos or suspicious URLs
- [ ] Review requested permissions carefully
- [ ] Don't authorize apps you don't recognize
- [ ] Use password managers - they won't fill on fake sites
- [ ] Enable 2FA on all accounts
- [ ] Regularly review authorized apps

## Provider-Specific Security Pages
- Google: https://myaccount.google.com/permissions
- Microsoft: https://account.microsoft.com/privacy/app-access
- GitHub: https://github.com/settings/applications
- Facebook: https://www.facebook.com/settings?tab=applications

## Reporting Phishing
- Report to the legitimate provider
- Forward phishing emails to anti-phishing organizations
- Report to your organization's security team
- Document the incident for future reference
""")
        materials.append(guide_path)
        self.simulation_artifacts.append(guide_path)
        
        # Create quick reference card
        reference_path = f"/tmp/oauth_quick_reference_{int(time.time())}.txt"
        with open(reference_path, 'w') as f:
            f.write("""OAuth Security Quick Reference
==============================

ALWAYS CHECK:
‚úì Full URL in address bar
‚úì HTTPS with padlock
‚úì Correct domain spelling
‚úì Certificate validity

RED FLAGS:
‚úó Unexpected login requests
‚úó Urgent language
‚úó Generic greetings
‚úó Suspicious sender
‚úó Mismatched URLs

LEGITIMATE DOMAINS:
‚Ä¢ Google: accounts.google.com
‚Ä¢ Microsoft: login.microsoftonline.com
‚Ä¢ GitHub: github.com
‚Ä¢ Facebook: facebook.com
‚Ä¢ Twitter: twitter.com

IF COMPROMISED:
1. Change password immediately
2. Revoke OAuth permissions
3. Check account activity
4. Enable 2FA
5. Alert security team
""")
        materials.append(reference_path)
        self.simulation_artifacts.append(reference_path)
        
        return materials
    
    def _create_detection_signatures(self) -> Dict[str, Any]:
        """Create phishing detection signatures"""
        return {
            'url_patterns': [
                'accounts.*google.*(?!\.google\.com)',
                'login.*microsoft.*(?!\.microsoft\.com)',
                'github.*login.*(?!github\.com)',
                'oauth.*phishing',
                'authorize.*fake.*domain'
            ],
            'suspicious_parameters': [
                'redirect_uri pointing to non-HTTPS',
                'client_id with suspicious values',
                'state parameters with tracking codes',
                'scope requesting excessive permissions'
            ],
            'behavioral_indicators': [
                'Login request without user action',
                'Multiple redirects through tracking domains',
                'JavaScript obfuscation on login pages',
                'Hidden iframes or popups',
                'Disabled right-click or inspect'
            ],
            'content_indicators': [
                'Urgent or threatening language',
                'Grammar and spelling errors',
                'Generic greetings',
                'Mismatched branding',
                'Low-quality logos or images'
            ]
        }
    
    def _get_attack_explanation(self) -> str:
        """Explain how OAuth phishing attacks work"""
        return """
OAuth phishing attacks exploit users' trust in familiar login flows. Here's how they work:

1. **Initial Lure**: Attackers send emails or messages claiming you need to re-authenticate,
   verify your account, or access a shared document.

2. **Fake OAuth Page**: The link leads to a convincing replica of a legitimate OAuth provider
   (Google, Microsoft, GitHub, etc.) but hosted on an attacker-controlled domain.

3. **Credential Harvesting**: When users enter their credentials, they're sent directly to
   the attacker instead of the real provider.

4. **Token Abuse**: In sophisticated attacks, attackers may actually complete the OAuth flow
   after stealing credentials, obtaining legitimate tokens to access the victim's account.

5. **Lateral Movement**: With access to one account, attackers often attempt to compromise
   other connected services and accounts.

The attack is particularly effective because:
- Users are accustomed to OAuth flows and may not scrutinize URLs carefully
- The pages can look identical to legitimate providers
- Mobile devices make it harder to verify URLs
- Users trust the OAuth process implicitly
"""
    
    def _get_phishing_red_flags(self) -> List[str]:
        """Get list of phishing red flags"""
        return [
            "URL doesn't match official provider domain exactly",
            "Missing HTTPS or certificate warnings",
            "Unexpected login requests without your action",
            "Urgent or threatening language in the request",
            "Generic greetings instead of your name",
            "Poor grammar, spelling, or formatting",
            "Requests for additional information beyond normal",
            "Suspicious sender email addresses",
            "Links that don't match displayed text",
            "Login pages that look 'slightly off'",
            "Disabled security features (can't right-click, etc.)",
            "Excessive permission requests",
            "Redirects through multiple domains",
            "Pop-ups or overlay windows",
            "Requests to disable security software"
        ]
    
    def _get_prevention_tips(self) -> List[str]:
        """Get OAuth phishing prevention tips"""
        return [
            "Always type provider URLs directly or use bookmarks",
            "Verify the FULL URL before entering any credentials",
            "Use a password manager - it won't autofill on fake sites",
            "Enable two-factor authentication on all accounts",
            "Be suspicious of unexpected login requests",
            "Check your browser's address bar for the padlock icon",
            "Hover over links to preview the actual destination",
            "Report suspicious emails to your security team",
            "Regularly review and revoke unnecessary OAuth permissions",
            "Keep your browser and operating system updated",
            "Use browser extensions that warn about phishing sites",
            "Educate yourself about current phishing techniques",
            "When in doubt, contact the service directly",
            "Never enter credentials after clicking email links",
            "Use unique, strong passwords for each service"
        ]
    
    def _get_legitimate_oauth_explanation(self) -> str:
        """Explain how legitimate OAuth works"""
        return """
Understanding legitimate OAuth helps you spot fakes. Here's how real OAuth works:

1. **You Initiate**: You click "Sign in with [Provider]" on a trusted app/website.

2. **Redirect to Provider**: You're redirected to the OFFICIAL provider domain:
   - Google: https://accounts.google.com/...
   - Microsoft: https://login.microsoftonline.com/...
   - GitHub: https://github.com/login/oauth/...

3. **Secure Login**: You log in on the provider's official site (if not already logged in).

4. **Permission Review**: The provider shows EXACTLY what permissions the app requests.

5. **Your Choice**: You can approve or deny the permission request.

6. **Secure Redirect**: You're redirected back to the app with an authorization code.

7. **Token Exchange**: The app exchanges the code for access tokens (happens behind the scenes).

Key Security Features:
- The app NEVER sees your password
- You can revoke access anytime from your account settings
- Permissions are limited to what you approved
- The entire flow uses encrypted HTTPS connections
- URLs remain on official provider domains during authentication
"""
    
    def _execute_real(self, target_url: str = None) -> Dict[str, Any]:
        """Execute real mode (still safe for OAuth phishing)"""
        # OAuth phishing simulation should never perform real attacks
        # Even in "authorized" mode, we only demonstrate safely
        
        self._log_warning("OAuth phishing operates in demonstration mode only")
        self._create_audit_log("SAFE_DEMONSTRATION_MODE")
        
        return {
            'success': True,
            'cve_id': self.cve_id,
            'mode': 'demonstration',
            'description': 'OAuth phishing awareness demonstration',
            'safety_notice': 'This module only provides educational demonstrations',
            'training_value': 'Use for security awareness training only'
        }
    
    def cleanup(self):
        """Clean up simulation artifacts"""
        self._log_safe("Cleaning up OAuth simulation artifacts")
        
        for artifact in self.simulation_artifacts:
            try:
                if os.path.exists(artifact):
                    os.remove(artifact)
                    self._log_safe(f"Removed: {artifact}")
            except Exception as e:
                self._log_warning(f"Failed to clean up {artifact}: {e}")
        
        self.simulation_artifacts.clear()


# Compatibility wrapper
class OAuthExploitEngine(OAuthExploitSafe):
    """Compatibility wrapper - redirects to safe implementation"""
    
    def __init__(self):
        super().__init__()
        self._log_warning("Using safe implementation of OAuth phishing simulation")


def execute_exploit(parameters: Dict[str, Any]) -> Dict[str, Any]:
    """Execute exploit with given parameters"""
    exploit = OAuthExploitSafe()
    
    # Set parameters
    for key, value in parameters.items():
        exploit.set_parameter(key, value)
    
    # OAuth phishing always runs in safe mode
    exploit.set_safety_mode(SafetyMode.SIMULATION)
    
    # Execute
    result = exploit.execute(parameters.get('target_url'))
    
    # Store exploit instance for cleanup
    result['_exploit_instance'] = exploit
    
    return result